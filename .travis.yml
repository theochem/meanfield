env:
  matrix:
  - MYCONDAPY=3.6
  - MYCONDAPY=3.7
  global:
    # ANACONDA_TOKEN
    - secure: "gajtB9hsmeVtcTztfNkwtSAhSOLrMnhnCZsSYCeXvWP/dOdrhdejiP6Kc5BTwmivzkL7CTM8I43ihhEABl1MzvPKLtqKcR64KtHUmmOtbwG1t9oGa+CrwIgQ0MM1w7DavrJyUJT9K/z0Bu6krLXutsZ9InGavjFynOqyg11lcSOHhV5gjhufbOV7ZFsb1snuTEW13gA3NKQwOEhAgi/F7htIszoO06BNKpsOjNteN/xMhUdEi/QrTPEpUinyH9nImCVigB6n9iRqsqom1YvRf/Qhr4f890e4nV7yghr1SNSWo6pCkmfiOy0rUYr1hzwWrK7qZW/J5YjWULPNomwPzdFxdQ2lvg2He1Q11p+e+5kYyFmT6c6ao2CBeESsYMDGafx0S4SyrlK91IGojLghiXmlSwUToX+9PK7mmoXZGNDYn2nuC2mtfj5p67SWONdVXpPlMkE07pjm+KfqWWWt2tQfpmM/r9+xkcDIzQnbsdcvmXUk0zBS/iADAMCmeCvJL0xefLhyCKVqXP07GXolEQr4V64/MGf0j0DgyLxOKksAM7PXWLsitXtUKX9JSOqJNvPe6l3YfM/L7AhKf8krcPD1FbPE+Ota6l0D5MhBcX1wm/vjdYMPCvbCQE+CZn5sVUuhZETXA+PPcVFJCjNciDBlPNVZJJPNLP/VDZ6YjwI="
    # GITHUB_TOKEN
    - secure: "nS5tbD6RH2LIooOcsfKXubQ97k7mwFpdN74zVKhw20ICR2PuO3RD9+QMhOyhEI1ORw4AkUFkhaYg7Mf11xuxby7Wwqa6DNV7uMoD9I3lcZr8nJHVN8zL/FGGMwMwsTYyRwLvp4iSRNfFD355i04JcVZsIsAT92nTxYPWP2KZ6vuHjUPdHhJ1yKK1pMREqS8R4Jm2ZkDNIlUI8r4Ft8Kukne2HY8lc1oI2d1AMt5d/NyC+D6fJUmtwaER9Zj15OPNbrFHVWSRn+ydtPtRxd53WTYN7hlYMXY8x0rHBJTJkcXgnj9l3rNiuwYTQxMuqZh+8aCfwV9EYfNOO+Yw1SijmkG+TNlIYa653lPSwmBlTIbZy+N1RwUKbRCdwQX8daxre3jPxlr+L5gSX4xNPGX2bYpHQ6f+9qtCNlmhNXfaezORjtzpm8nkfvgU12EH1/mqRrCDxR6uw/nTeW4ONVjsaaDCWzQ6VHO2vISGn31cjrl+bvML7F96cGJB0l+iRWEtb/NFtKVFA6oE6MHoCQXsxSCvJRfuGpm6aOomSySQvuitlsDQmrEP9Ud5anzSgpX6imzO8HUhvmvU79xX/0VKIQYWM78SBJYpXDd1bZ0iIlBWfJMTIWc1aCI0A2lAogIqxi+QKKCpl492rAQXtA0rnBkbjE5vd4C0TYf6kDijr/0="
    # PYPI_PASSWD
    - secure: "XJK34ec/5islJUm/U1nr9JZYlkVDaGQ3JiB9EcrCBFAfR7K7p5qrkvdjrSMiri1OLDV0HQ2Ixy2++2HpBCkgE8jxPBWAHzICTrtgj6rdV40Q5BRIIG5Ue4q5pTby60d1LSV5rlhzA6mUHF4MhXtBgMYpLjiEev0ahVCUqPwg+PCrSK/46DS6CnuVUQYSm44lxTSIf98jwrFUQ+A+Yd2OUxyfDTtN6rmrP60ndSpt8PlDFThDvD7fJjKxLb4Y4Zs7MQUFGTrjxCWI1U2l1Xm9Cg+vqJBaC/YFJMr3ObTThjTzoDBm8TszAouvLdeiOzE4bka8hKir/4SBjswA6C4/DyVOWigWL9VAIO5wgyHYjnf7zL1UknuZ8PU/Qr5qgN3G0rJjiC7VmiUAzJUwFf6nJdMygVGqj1AZWE1F5sRwMk83I7xyKl/To7azrwP2m/bn73Nvo6xYF45oPPcHZuacZ0Ecum2v0j4ivQoEaON1e5x7yqOK1LUUtuN1GsWMe+uNlJtjX7nAPN29gtqr3NA9xjIysjYs+PKtXgA0660BCiEYehK85Q6evneDGixL+UnvT9NrF4clkI/BT4YtfIR+vcQlJ1BorgWKqD16a8/F5kdvRo9Q1zVry0uMNVbGcJXIi7W/92CiUqRJfHK6Qg+JrxY/73YCjC9MThAhZDITUSU="
    - PROJECT_NAME=meanfield
    - GITHUB_REPO_NAME=theochem/meanfield
    - CONDA_PKG_NAME_PY=meanfield

# TEMPLATED FROM https://raw.githubusercontent.com/theochem/python-cython-ci-example/master/.travis.yml 
####
# EVERYTHING BELOW THIS LINE IS AUTOGENERATED.
####
# v1.0

# Do not use Travis Python to save some time.
language: generic
os:
  - linux
  - osx
dist: trusty
sudo: false

matrix:
  # We only test on Linux with one specific Python version, unless we make a release. All
  # other cases are allowed to fail and will exit early. With the fast_finish option,
  # travis will send a status update to github as soon as the non-allowed-to-fail has
  # finished. This speeds up testing in PRs.
  #
  # This is not ideal. It would be better to run just one item from the build matrix when
  # not preparing a release. This is not possible on Travis. There are several tickets on
  # travis-ci related to this limitation.
  #
  #    https://github.com/travis-ci/travis-ci/issues/7451
  #    https://github.com/travis-ci/travis-ci/issues/7149
  #    https://github.com/travis-ci/travis-ci/issues/2778
  #    ...
  fast_finish: true
  allow_failures:
  - os: osx


cache:
  directories:
    - $HOME/download # Sufficient to add miniconda.sh to TRAVIS cache.
    - $HOME/miniconda # Add the installation to TRAVIS cache.

before_cache:
- if ! [[ $TRAVIS_TAG ]]; then rm -rf $HOME/miniconda/conda-bld; fi
- rm -rf $HOME/miniconda/locks $HOME/miniconda/pkgs $HOME/miniconda/var $HOME/miniconda/conda-meta/history
- pip uninstall -y cardboardlint # Cardboardlint always installs even if no changes are made.

branches:
  only:
    - master
    - /^[0-9]+\.[0-9]+(\.[0-9]+)?([ab][0-9]+)?$/

before_install:
- if ! [[ $TRAVIS_TAG || $TRAVIS_OS_NAME == "linux" && $MYCONDAPY == "3.6" ]]; then exit 0; fi
# Get miniconda. Take the right version, so re-installing python is hopefully not needed.
- if test -e $HOME/miniconda/bin; then
    echo "miniconda already installed.";
  else
    echo "Installing miniconda.";
    rm -rf $HOME/miniconda;
    mkdir -p $HOME/download;
    if [[ -d $HOME/download/miniconda.sh ]]; then rm -rf $HOME/download/miniconda.sh; fi;
    if [ "${MYCONDAPY}" = "2.7" ]; then
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    else
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    fi;
    bash $HOME/download/miniconda.sh -b -p $HOME/miniconda;
  fi


install:
- source $HOME/miniconda/bin/activate
- hash -r
# Configure conda and get a few essentials
- conda config --set always_yes yes
- conda config --add channels theochem
- conda install -q conda conda-build conda-verify

# Set the version info from the git tag
- git fetch origin --tags &&
  export PROJECT_VERSION=$(python tools/gitversion.py) &&
  python tools/gitversion.py python > ${PROJECT_NAME}/version.py;

# Get a list of all build and runtime dependencies.
# This should become easier, without the copy to conda.recipe.ugly.
- conda render -f tools/conda.recipe/rendered.yaml tools/conda.recipe
- CONDA_DEPENDENCIES=$(python -c "from yaml import load;
    req1 = load(open('tools/conda.recipe/rendered.yaml'))['requirements'];
    deps = req1['build'] + req1['run'] + req1['host'];
    print(' '.join(set(dep.split()[0] for dep in deps)))")

# Get the right python version for building. This only does something for 3.5.
# Install extra package needed to make things work. Most things can be listed as
# dependencies on meta.yaml and setup.py, unless setup.py already imports them.
# Install conda tools for packaging and uploading
- conda install -q python=${MYCONDAPY} anaconda-client numpy setuptools cython
- if ! [[ $TRAVIS_TAG ]]; then
    conda install -q ${CONDA_DEPENDENCIES};
    pip install --upgrade pylint codecov coverage pycodestyle pydocstyle;
  fi
# Show conda info for debugging
- conda info -a

# Install the latest cardboardlinter
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    pip install --upgrade git+https://github.com/theochem/cardboardlint.git@master#egg=cardboardlint;
  fi

script:
# Static linting
# --------------
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    cardboardlinter --refspec $TRAVIS_BRANCH -f static;
  fi

# Unit tests and dynamic linting
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- if [[ $TRAVIS_TAG ]]; then
    conda build -q tools/conda.recipe;
  else
    python setup.py build_ext -i --define CYTHON_TRACE_NOGIL &&
    nosetests ${PROJECT_NAME}
         -v --detailed-errors --with-coverage --cover-package=${PROJECT_NAME}
         --cover-tests --cover-inclusive --cover-branches &&
    coverage xml -i &&

    if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
       cardboardlinter --refspec $TRAVIS_BRANCH -f 'dynamic';
    fi
  fi

# Make CPP and PY source package for github deployment
- if [[ $TRAVIS_TAG ]]; then
    python setup.py sdist;
  fi

# Some other stuff
# ----------------

# Compile documentation
- if [[ -e doc ]]; then
    (cd doc; make html);
  fi

after_success:
# Upload the coverage analysis
- codecov -f coverage.xml

before_deploy:
# Try to set some env vars to configure deployment.
# Please keep the following lines. They will be used again as soon as it is supported on
# travis. See https://github.com/travis-ci/dpl/issues/613
#- export IS_PRERELEASE=$(python -c 'import os; tt=os.environ["TRAVIS_TAG"]; print("true" if ("a" in tt or "b" in tt) else "false")')
#- echo ${IS_PRERELEASE}
- export ANACONDA_LABEL=$(python -c 'import os; tt=os.environ["TRAVIS_TAG"]; print("dev" if ("a" in tt) else ("test" if "b" in tt else "main"))')
- echo ${ANACONDA_LABEL}

# In deployment, the env var TRAVIS_TAG contains the name of the current version, if any.
deploy:
- provider: releases
  skip_cleanup: true
  api_key: ${GITHUB_TOKEN}
  file: dist/${PROJECT_NAME}-${TRAVIS_TAG}.tar.gz
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$MYCONDAPY == 3.6 && $TRAVIS_OS_NAME == linux && $TRAVIS_TAG == *[ab]*"
  prerelease: true

- provider: releases
  skip_cleanup: true
  api_key: ${GITHUB_TOKEN}
  file: dist/${PROJECT_NAME}-${TRAVIS_TAG}.tar.gz
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$MYCONDAPY == 3.6 && $TRAVIS_OS_NAME == linux && $TRAVIS_TAG != *[ab]*"
  prerelease: false

- provider: script
  skip_cleanup: true
  script: anaconda -t $ANACONDA_TOKEN upload --force -l ${ANACONDA_LABEL} ${HOME}/miniconda/conda-bld/*/${PROJECT_NAME}-*.tar.bz2
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true

#- provider: pypi
#  skip_cleanup: true
#  user: ${PYPI_LOGIN}
#  password: ${PYPI_PASSWD}
#  on:
#    repo: ${GITHUB_REPO_NAME}
#    tags: true
#    condition: "$TRAVIS_TAG != *[ab]* && $MYCONDAPY == 3.6 && $TRAVIS_OS_NAME == linux"

- provider: pages
  skip_cleanup: true
  github_token: ${GITHUB_TOKEN}
  project_name: ${PROJECT_NAME}
  local_dir: doc/_build/html
  on:
    repo: ${GITHUB_REPO_NAME}
    condition: "-e doc && $TRAVIS_TAG != *[ab]* && $MYCONDAPY == 3.6 && $TRAVIS_OS_NAME == linux"
    tags: true
